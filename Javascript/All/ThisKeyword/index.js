"use strict";

// this in global space

// console.log(this);  // this behaves as global object in global space (window)


//////////////////////////////////////////////////////////////////////////////////////////////


// this inside a function

// function x(){
//     //the value depends on strict / non strict mode
//     console.log(this);
// }
// x();

//////////////////////////////////////////////////////////////////////////////////////////////

// this in non-strict mode -(this substtritution)

// If the value of "this" keyword is undefined/null then "this" will be replaced with global object only on strict mode

//////////////////////////////////////////////////////////////////////////////////////////////

// this value depends on how this is called (window)

//////////////////////////////////////////////////////////////////////////////////////////////

// this inside a object method

const obj = {
    a:10,
    x:function (){
        console.log(this.a); 
    }
}

obj.x();

//////////////////////////////////////////////////////////////////////////////////////////////

// call apply bind methids (sharing methods)

const student = {
    name: 'John',
    printName: function (){
        console.log(this);
    },
};

student.printName();

const student2 = {
    a: 'cooper',
};

student.printName.call(student2); // here value of "this" is student 2

//////////////////////////////////////////////////////////////////////////////////////////////

// this inside arrow function

//////////////////////////////////////////////////////////////////////////////////////////////

// this inside nested arrow function

//////////////////////////////////////////////////////////////////////////////////////////////

// this inside DOM